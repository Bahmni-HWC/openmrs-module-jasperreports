<?xml version="1.0"?>
<!-- ********************************************************* -->
<!-- ** JasperReport Module									** -->
<!-- **														** -->
<!-- ** @author Simon Kelly									** -->
<!-- ********************************************************* -->
<project name="JasperReportModule" default="package-module">

	<property name="module.version" value="1.4.11" />
	<property file="build.properties" />

	<!-- *********************************************************** -->
	<!-- **                     TARGETS                           ** -->
	<!-- *********************************************************** -->
	<target name="init" description="initialization">

		<xmlproperty file="metadata/config.xml"/>
		
		<echo>Building version ${module.version}</echo>

		<filterset id="variables.to.replace">
			<filter token="MODULE_ID" value="${module.id}" />
			<filter token="MODULE_NAME" value="${module.name}" />
			<filter token="MODULE_VERSION" value="${module.version}" />
			<filter token="MODULE_PACKAGE" value="${module.package}" />
		</filterset>

		<path id="classpath">
			<fileset dir="lib">
				<include name="**/*.jar" />
			</fileset>
			<fileset dir="lib-common">
				<include name="**/*.jar" />
			</fileset>
		</path>

		<mkdir dir="${build.dir}" />
		<mkdir dir="${dist.dir}" />

	</target>

	<target name="clean" description="Delete build and dist directories">
		<delete dir="${dist.dir}" />
		<delete dir="${build.dir}" />
	</target>

	<target name="compile-module" depends="init" description="Compiles the module">

		<!-- Copy other source data to the build folder -->
		<copy todir="${build.dir}">
			<fileset dir="${src.dir}" />
			<fileset dir="${web.src.dir}" />
			<filterset refid="variables.to.replace" />
		</copy>

		<!--  Compile module java files -->
		<javac classpathref="classpath" debug="true" debuglevel="lines,source">
			<src path="${build.dir}" />
			<include name="**/*.java" />
		</javac>

		<!--  Compile module web java files
		<javac destdir="${build.dir}" classpathref="classpath" debug="true" debuglevel="lines,source">
			<src path="${web.src.dir}" />
			<include name="**/*.java" />
		</javac> -->

	</target>

	<target name="package-module" depends="compile-module" description="Packages module into jar file">

		<!-- Copy module libs 
		<copy todir="${build.dir}/lib" flatten="true">
			<fileset dir="${lib.dir}">
				<include name="jasper/*.jar" />
				<include name="commons-javaflow/*.jar" />
				<include name="commons-digester/*.jar" />
			</fileset>
		</copy>-->

		<!-- Copy module metadata -->
		<copy todir="${build.dir}">
			<fileset dir="metadata/" includes="**/*" />
			<filterset refid="variables.to.replace" />
		</copy>

		<!-- Copy module web data -->
		<copy todir="${build.dir}/web/module/">
			<fileset dir="web/module/" includes="**/*" />
			<filterset refid="variables.to.replace" />
		</copy>
		
		<!-- Copy lib folder -->
		<!-- (lib should only contain this module's required libraries that OpenMRS does not contain already -->
		<copy todir="build/lib" failonerror="false">
			<fileset dir="lib" includes="**/*" />
		</copy>

		<!-- Create distributable jar file -->
		<jar destfile="${dist.dir}/${module.id}-${module.version}.omod">
			<fileset dir="build" includes="**/*" />
		</jar>
	</target>

	<target name="Export source" depends="init" description="Export the source for release">
		<mkdir dir="${export.src}" />
		<!-- Copy module metadata -->
		<copy todir="${export.src}/src">
			<fileset dir="${src.dir}">
				<include name="**/*" />
				<exclude name="**/Props.java" />
				<exclude name="**/log4j.properties" />
				<exclude name="**/props.properties" />
				<exclude name="**/DrugComboReportGenerator.java" />
			</fileset>
		</copy>
		<copy todir="${export.src}/test">
			<fileset dir="${test.dir}" includes="**/*" />
		</copy>
		<copy todir="${export.src}/metadata">
			<fileset dir="${basedir}/metadata" includes="**/*" />
		</copy>
		<copy todir="${export.src}/web">
			<fileset dir="${web.dir}" includes="**/*" />
		</copy>
		<copy todir="${export.src}/lib">
			<fileset dir="${lib.dir}" includes="**/*" />
		</copy>
		<copy todir="${export.src}">
			<fileset dir="${basedir}">
				<include name="**/build.xml" />
				<include name="**/build.properties" />
			</fileset>
		</copy>
	</target>
</project>

